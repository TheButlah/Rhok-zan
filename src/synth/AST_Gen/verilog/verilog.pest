/// this module is based on the grammar specified here => https://www.verilog.com/VerilogBNF.html
// due to issues with reference formal grammar I'm putting this on hold

// SOURCE_TEXT
    source_text = {description*}
    description = {module|UDP}
    module = {name_of_module ~ list_of_ports? ~ ";" ~ module_item* ~ "endmodule"}
    name_of_module = {IDENTIFIER}
    list_of_ports = {port ~ ("," ~ port)*}
    port = {
        port_expression? 
        | ("." ~ name_of_port ~ "(" ~ port_expression? ~ ")")
    }
    port_expression = {
        port_reference 
        | ("{" ~ port_reference ~ ("," ~ port_reference)* ~ "}")
    }
    port_reference = {
        name_of_variable 
        | (name_of_variable ~ "[" ~ constant_expression ~ "]")
        | (name_of_variable ~ "[" ~ constant_expression ~ ":" ~ constant_expression ~ "]")
    }
    name_of_port = {IDENTIFIER}
    name_of_variable = {IDENTIFIER}
    module_item = {
        parameter_declaration
        |input_declaration
        |output_declaration
        |inout_declaration
        |net_declaration
        |reg_declaration
        |time_declaration
        |integer_declaration
        |real_declaration
        |event_declaration
        |gate_declaration
        |UDP_instantiation
        |module_instantiation
        |parameter_override
        |continuous_assign
        |specify_block
        |initial_statement
        |always_statement
        |task
        |function
    }
    UDP = {
        "primitive" ~ name_of_UDP ~ "(" ~
            name_of_variable ~ ("," ~ name_of_variable)* ~ 
        ")" ~ ";" ~
        UDP_declaration+ ~
        UDP_initial_statement? ~
        table_definition ~
        "endprimitive"
    }
    name_of_UDP = {IDENTIFIER}
    UDP_declaration = { 
        output_declaration
        | reg_declaration 
        | input_declaration
    }
    UDP_initial_statement = {"initial" ~ output_terminal_name ~ "=" ~ init_val ~ ";"}
    init_val = { 
        ^"1'b0"
        | ^"1'b1"
        | ^"1'bx"
        | "1"
        | "0"
    }
    output_terminal_name = {name_of_variable}
    table_definition = {"table" ~ table_entries ~ "endtable"}
    table_entries = {
        combinational_entry+
        |sequential_entry+
    }
    combinational_entry = {level_input_list ~ ":" ~ OUTPUT_SYMBOL ~ ";"}
    sequential_entry = {input_list ~ ":" ~ state ~ next_state ~ ";"}
    input_list = {level_input_list|edge_input_list}
    level_input_list = {LEVEL_SYMBOL+}
    edge_input_list = {LEVEL_SYMBOL* ~ edge ~ LEVEL_SYMBOL*}
    edge = {
        ("(" ~ LEVEL_SYMBOL ~ LEVEL_SYMBOL ~")")
        |EDGE_SYMBOL
    }
    state = {LEVEL_SYMBOL}
    next_state = {OUTPUT_SYMBOL|"-"}
    OUTPUT_SYMBOL = {"0"|"1"|^"x"}
    LEVEL_SYMBOL = {"0"|"1"|^"x"|"?"|^"b"}
    EDGE_SYMBOL = {^"r"|^"f"|^"p"|^"n"|"*"}
    task = {"task" ~ name_of_task ~ ";" ~ tf_declaration* ~ statement_or_null ~ "end_task"}
    name_of_task = {IDENTIFIER}
    function = {"function" ~ range_or_type? ~ name_of_function ~ ";" ~ tf_declaration+ ~ statement ~ "endfunction"}
    range_or_type = {range | "integer" | "real"}
    name_of_function = {IDENTIFIER} 
    tf_declaration = {
        parameter_declaration
        |input_declaration
        |output_declaration
        |inout_declaration
        |reg_declaration
        |time_declaration
        |integer_declaration
        |real_declaration
    }

// DECLARATIONS 
    parameter_declaration = {"parameter" ~ list_of_param_assignments ~ ";"}
    list_of_param_assignments = {param_assignment ~ ("," ~ param_assignment)*}
    param_assignment = {identifier ~ "=" ~ constant_expression}
    input_declaration = {"input" ~ range? ~ list_of_variables ~ ";"}
    output_declaration = {"output" ~ range? ~ list_of_variables ~ ";"}
    inout_declaration = {"inout" ~ range? ~ list_of_variables ~ ";"}
    net_declaration = {
        (NETTYPE ~ expandrange? ~ delay? ~ list_of_variables ~ ";")
        | ("trireg" ~ charge_strength? ~ expandrange? ~ delay? ~ list_of_variables ~ ";")
        | (NETTYPE ~ drive_strength? ~ expandrange? ~ delay? ~ list_of_assignments ~ ";")
    }
    NETTYPE = {"wire"|"tri"|"tri1"|"supply0"|"wand"|"triand"|"tri0"|"supply1"|"wor"|"trior"|"trireg"}
    expandrange = {range | ("scalared" ~ range) | ("vectored" ~ range)}
    reg_declaration = {"reg" ~ range? ~ list_of_register_variables ~ ";"}
    time_declaration = {"time" ~ list_of_register_variables ~ ";"}
    integer_declaration = {"integer" ~ list_of_register_variables ~ ";"}
    real_declaration = {"real" ~ list_of_variables ~ ";"}
    event_declaration = {"event" ~ name_of_event ~ ("," ~ name_of_event)* ~ ";"}
    continuous_assign = {
        ("assign" ~ drive_strength? ~ delay? ~ list_of_assignments ~ ";")
        | (NETTYPE ~ drive_strength? ~ expandrange? ~ delay? ~ list_of_assignments ~ ";")
    }
    parameter_override = {list_of_param_assignments ~ ";"}
    list_of_variables = {name_of_variable ~ ("," ~ name_of_variable)*}
    name_of_variable = {IDENTIFIER}
    list_of_register_variables = {register_variable ~ ("," ~ register_variable)*}
    register_variable = {
        name_of_register 
        | (name_of_memory ~ "[" ~ constant_expression ~ ":" ~ constant_expression ~ "]")
    }
    name_of_register = {IDENTIFIER}
    name_of_memory = {IDENTIFIER}
    name_of_event = {IDENTIFIER}
    charge_strength = { 
        ("(" ~ "small" ~ ")")
        |("(" ~ "medium" ~ ")")
        |("(" ~ "large" ~ ")")
    }
    drive_strength = {
        ("(" ~ STRENGTH0 ~ "," ~ STRENGTH1 ~ ")") 
        | ("(" ~ STRENGTH1 ~ "," ~ STRENGTH0 ~ ")")
    }
    STRENGTH0 = {
        "supply0"
        |"strong0"
        |"pull0"
        |"weak0"
        |"highz0"
    }
    STRENGTH1 = {
        "supply1"
        |"strong1"
        |"pull1"
        |"weak1"
        |"highz1"
    }
    range = {"[" ~ constant_expression ~ ":" ~ constant_expression ~ "]"}
    list_of_assignments = {assignment ~ ("," ~ assignment)*}

// PRIMITIVE_INSTANCES
    gate_declaration = {
        GATETYPE ~ drive_strength?  ~ delay? ~ gate_instance ~ ("," ~ gate_instance)*
    }
    GATETYPE = {
        "and" | "nand" | "or" | "nor" | "xor" | "xnor" 
        | "buf" | "bufif0" | "bufif1" 
        | "not" | "notif0" | "notif1" 
        | "pulldown" | "pullup" 
        | "nmos" | "rnmos" | "pmos" | "rpmos" | "cmos" | "rcmos"
        | "tran" | "rtran" | "tranif0" | "rtranif0" | "tranif1" | "rtranif1"
    }
    delay = {
        ("#" ~ number)
        | ("#" ~ identifier)
        | ("#" ~ "(" ~ mintypmax_expression ~ ("," ~ mintypmax_expression){0,2})
    }
    gate_instance = {name_of_gate_instance? ~ "(" ~ terminal ~ "," ~ ("," ~ terminal)* ~ ")"}
    name_of_gate_instance = {IDENTIFIER ~ range?}
    UDP_instantiation = {name_of_udp ~ drive_strength? ~ delay? ~ UDP_instance ~ ("," ~ UDP_instance)* ~ ";"}
    name_of_UDP = {IDENTIFIER}
UDP_instance = {name_of_UDP_instance? ~ "(" ~ terminal ~ ("," ~ terminal)* ~ ")"}
name_of_UDP_instance = {IDENTIFIER ~ range?}
terminal = {expression|IDENTIFIER}

// MODULE_INSTANTIATIONS
    module_instantiation = {name_of_module ~ parameter_value_assignment? ~ module_instance ~ ("," ~ module_instance)* ~ ";"} 
    name_of_module = {IDENTIFIER}
    parameter_value_assignment = {"#" ~ "(" ~ expression ~ ("," ~ expression)* ~ ")"}
    module_instance = {name_of_instance ~ "(" ~ list_of_module_connections? ~ ")"}
    name_of_instance = {IDENTIFIER ~ range?}
    list_of_module_connections = {
        (module_port_connection ~ ("," ~ module_port_connection)*)
        | (named_port_connection ~ ("," ~ named_port_connection)*)
    }
    module_port_connection = {expression | NULL}
    // A NULL token is a bad idea but was included in 
    // the reference grammar so I'm going to leave it 
    // for the moment.
    NULL = {""}  
    named_port_connection = {IDENTIFIER}

// BEHAVIORAL_STATEMENTS
    initial_statement = {"initial" ~ statement}
    always_statement = {"always" ~ statement}
    statement_or_null = {statement | ";"}
    statement = {
        (blocking_assignement ~ ";")
        |(non_blocking_assignment ~ ";")
        |("if" ~ "(" ~ expression ~ ")" ~ statement_or_null)
        |("if" ~ "(" ~ expression ~ ")" ~ statement_or_null ~ "else" ~ statement_or_null)
        |("case" ~ "(" ~ expression ~ ")" ~ case_item+ ~ "endcase")
        |("casez" ~ "(" ~ expression ~ ")" ~ case_item+ ~ "endcase")
        |("casex" ~ "(" ~ expression ~ ")" ~ case_item+ ~ "endcase")
        |("forever" ~ statement)
        |("repeat" ~ "(" ~ expression ~ ")" ~ statement)
        |("while" ~ "(" ~ expression ~ ")" ~ statement)
        |("for" ~ "(" ~ assignment ~ ";" ~ expression ~ ";" ~ assignment ~ ")" ~ statement)
        |(delay_or_event_control ~ statement_or_null)
        |("wait" ~ "(" ~ expression ~ ")" ~ statement_or_null)
        |("->" ~ name_of_event ~ ";")
        |(seq_block)
        |(par_block)
        |(task_enable)
        |(system_task_enable)
        |("disable" ~ name_of_task ~ ";")
        |("disable" ~ name_of_block ~ ";")
        |("assign" ~ assignment ~ ";")
        |("deassign" ~ lvalue ~ ";")
        |("force" ~ assignment ~ ";")
        |("release" ~ lvalue ~ ";")
    }
    assignment = {lvalue ~ "=" ~ expression}
    blocking_assignement = {(lvalue ~ "=" ~ expression)|(lvalue ~ "=" ~ delay_or_event_control ~ expression ~ ";")}
    delay_or_event_control = {delay_control | event_control | ("repeat" ~ "(" ~ expression ~ ")" ~ event_control)}
    case_item = {
        (expression ~ ("," ~ expression)* ~ ":" ~statement_or_null)
        |("default" ~ ":" ~ statement_or_null)
        |("default" ~ statement_or_null)
    }
    seq_block = { 
        ("begin" ~ statemetnt* ~ "end")
        |("begin" ~ ":" ~ name_of_block ~ block_declaration* ~ statment ~ "end")
    }
    par_block = { 
        ("fork" ~ statment* ~ "join")
        |("fork" ~ ":" ~ name_of_block ~ block_declaration* ~ statement* ~ "join")
    }
    name_of_block = {IDENTIFIER}
    block_declaration = { 
        parameter_declaration
        | reg_declaration
        | integer_declaration
        | real_declaration
        | time_declaration
        | event_declaration
    }
    task_enable = { 
        name_of_task
        | (name_of_task ~ "(" ~ expression ~ ("," ~ expression)* ~ ")" ~ ";")
    }
    system_task_enable = { 
        (name_of_system_task ~ ";")
        |(name_of_system_task ~ "(" ~ expression ~ ("," ~ expression)* ~ ")" ~ ";")
    }
    name_of_system_task = ${"$" ~ system_identifier}
    SYSTEM_IDENTIFIER = {IDENTIFIER}

// SPECIFY_SECTION
    specify_block = {"speicfy" ~ specify_item* ~ "endspecify"}
    specify_item = { 
        specparam_declaration
        | path_declaration
        | level_sensitive_path_declaration
        | edge_sensitive_path_declaration
        | system_timing_check
        | sdpd
    }
    specparam_declaration = {"specparam" ~ list_of_param_assignments ~ ";"}
    list_of_param_assignments = {param_assignment ~ ("," ~ param_assignment)*}
    param_assignment = {identifier ~ "=" ~ constant_expression}
    path_declaration = {path_description ~ "=" ~ path_delay_value ~ ";"}
    path_description = { 
        ("(" ~ specify_input_terminal_descriptor ~ "=>" ~ specify_output_terminal_descriptor ~ ")")
        |("(" ~ list_of_path_inputs ~ "*>" ~ list_of_path_outputs ~ ")")
    }
    list_of_path_inputs = {specify_input_terminal_descriptor ~ ("," ~ specify_input_terminal_descriptor)*}
    list_of_path_outputs = {specify_output_terminal_descriptor ~ ("," ~ specify_output_terminal_descriptor)*}
    speicfy_input_terminal_descriptor = { 
        input_identifier 
        |(input_identifier ~ "[" ~ constant_expression ~ "]")
        |(input_identifier ~ "[" ~ constant_expression ~ ":" ~ constant_expression ~ "]")
    }
    speicfy_output_terminal_descriptor = { 
        output_identifier 
        |(output_identifier ~ "[" ~ constant_expression ~ "]")
        |(output_identifier ~ "[" ~ constant_expression ~ ":" ~ constant_expression ~ "]")
    }
    input_identifier = {IDENTIFIER}
    output_identifier = {IDENTIFIER}
    path_delay_value = { 
        path_delay_expression
        |("(" ~ path_delay_expression ~ ("," ~ path_delay_expression){1,11} ~ ")")
    }
    path_delay_expression = {mintypmax_expression}
    system_timing_check = { 
        ("$setup(" ~ timing_check_event ~ "," ~ timing_check_event ~ "," ~ timing_check_limit ~ ("," ~ notify_register)? ~ ")" ~ ";")
        |("$hold(" ~ timing_check_event ~ "," ~ timing_check_event ~ "," ~ timing_check_limit ~ ("," ~ notify_register)? ~ ")" ~ ";")
        |("$period(" ~ controlled_timing_check_event ~ "," ~ timing_check_limit ~ ("," ~ notify_register)? ~ ")" ~ ";")
        |("$width(" ~ controlled_timing_check_event ~ "," ~ timing_check_limit ~ ("," ~ constant_expression ~ "," ~ notify_register)? ~ ")" ~ ";")
        |("$skew(" ~ timing_check_event ~ "," ~ timing_check_event ~ "," ~ timing_check_limit ~ ("," ~ notify_register)? ~ ")" ~ ";")
        |("$recovery(" ~ controlled_timing_check_event ~ "," ~ timing_check_event ~ "," ~ timing_check_limit ~ ("," ~ notify_register)? ~ ")" ~ ";")
        |("$setuphold(" ~ timing_check_event ~ "," ~ timing_check_event ~ "," ~ timing_check_limit ~ "," ~ timing_check_limit ~ ("," ~ notify_register)? ~ ")" ~ ";")
    }
    timing_check_event = {timing_check_event_control? ~ specify_terminal_descriptor ~ ("&&&" ~ timing_check_condition)?}
    specify_terminal_descriptor = { 
        specify_input_terminal_descriptor
        | specify_output_terminal_descriptor
    }
    controlled_timing_check_event = { timing_check_event_control ~ specify_terminal_descriptor ~ ("&&&" ~ timing_check_condition)?}
    timing_check_event_control = { 
        "posedge" 
        | "negedge" 
        | edge_control_specifier
    }
    edge_descriptor = { 
        "01"
        |"10"
        |"0x"
        |"x1"
        |"1x"
        |"x0"
    }
    timing_check_condition = { 
        scalar_timing_check_condition
        | ("(" ~ scalar_timing_check_condition ~ ")")
    }
    scalar_timing_check_condition = { 
        scalar_expression
        |("~" ~ scalar_expression)
        |(scalar_expression ~ "==" ~ scalar_constant)
        |(scalar_expression ~ "===" ~ scalar_constant)
        |(scalar_expression ~ "!=" ~ scalar_constant)
        |(scalar_expression ~ "!==" ~ scalar_constant)
    }
    scalar_expression = { 
        // A scalar expression is a one bit net or a bit-select of an expanded vector net.
        // this must be validated and enforced post parsing as the parser
        // does not store if a variable is scalar or vectored for later manipulation
        name_of_variable 
        | (name_of_variable ~ "[" ~ constant_expression ~ "]")
    }
    timing_check_limit = {expression}
    scalar_constant = { 
        ^"1'b0"
        |^"1'b1"
        |^"'b0"
        |^"'b1"
        |"0"
        |"1"
    }
    notify_register = {identifier}
    level_sensitive_path_declaration = { 
        ("if" ~ "(" ~ conditional_port_expression ~ ")" ~ "(" ~ speicfy_input_terminal_descriptor ~ polarity_operator? ~ "=>" ~ specify_output_terminal_descriptor ~ ")" ~ "=" ~ path_delay_value ~ ";")
        |("if" ~ "(" ~ conditional_port_expression ~ ")" ~ "(" ~ list_of_path_inputs ~ polarity_operator? ~ "*>" ~ list_of_path_outputs ~ ")" ~ "=" ~ path_delay_value ~ ";")
    }
    conditional_port_expression = { 
        port_reference
        |(UNARY_OPERATOR ~ port_reference)
        |(port_reference ~ BINARY_OPERATOR ~ port_reference)
    }
    edge_sensitive_path_declaration = { 
        (("if" ~ "(" ~ expression ~ ")")? ~ "(" ~ edge_identifier? ~ specify_input_terminal_descriptor ~ "=>" ~ "(" ~ speicfy_output_terminal_descriptor ~ polarity_operator? ~ ":" ~ data_source_expression ~ ")"{2} ~ "=" ~ path_delay_value ~ ";")
        |(("if" ~ "(" ~ expression ~ ")")? ~ "(" ~ edge_identifier? ~ specify_input_terminal_descriptor ~ "*>" ~ "(" ~ list_of_path_outputs ~ polarity_operator? ~ ":" ~ data_source_expression ~ ")"{2} ~ "=" ~ path_delay_value ~ ";")
    }
    data_source_expression = { 
        // Any expression, including constants and lists. Its width must be one bit or
	    // equal to the  destination's width. If the destination is a list, the data
	    // source must be as wide as the sum of  the bits of the members.
    }